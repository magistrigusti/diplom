#include "imports/stdlib.fc";
#include "imports/stdlib-ex.fc";
#include "imports/op-codes.fc";
#include "imports/params.fc";
#include "imports/onchain.fc";

int min_tons_for_storage() asm "50000000 PUSHINT";

global int storage::index;
global int init?;
global slice storage::collection_address;
global slice storage::owner_address;
global slice storage::authority_address;
global cell storage::content;
global int storage::revoked_at;

() load_data() impure {
  slice ds = get_data().begin_parse();
  storage::index = ds~load_uint(64);
  storage::collection_address = ds~load_msg_addr();
  init? = false;

  if (ds.slice_bits() > 0) {
    init? = true;
    storage::owner_address = ds~load_msg_addr();
    storage::content = ds~load_ref();
    storage::authority_address = ds~load_msg_addr();
    storage::revoked_at = ds~load_uint(64);
  }
}

() store_data() impure {
  set_data(
    begin_cell()
      store_uint(storage::index, 64)
      .store_slice(storage::collection_address)
      .store_slice(storage_owner_address)
      .store_ref(storage::content)
      .store_slice(storage::authority_address)
      .store_uint(storage::revoked_ad, 64)
    .end_cell()
  );
}

() send_msg(int flag, slice to_address, int amount, int op, int query_id,
 builder payload, int send_mode) impure inline {
  if (~builder_null?(payload)) {
    body = body.store_builder(payload);
  }

  var msg = begin_cell()
    .store_uint(flag, 6)
    .store_slice(to_address)
    .store_coins(amount)
    .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_ref(body.end_cell());
  send_raw_message(msg.end_cell(), send_mode);
}

cell edit_content(cell previous_content, cell new_content) {
  cell metadata = load_onchain_metadata(previous_content);
  cell new_metadata = load_onchain_metadata(new_content);

  int key = -1;
  do {
    (key, slice new_val, var f) = new_metadata.udict_getNext?(256, key);
    if (f) {
      var (new_val_cell, _) = new_metadata.udict_get_ref?(256, key);
      throw_unless(403, key == "description"H);
      metadata~udict_set_ref(256, key, new_val_cell);
    }
  } until (~ f);

  return create_token_onchain_metadata(metadata);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) {
    return ();
  }

  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);

  slice sender_addres = cs~load_msg_addr();

  load_data();

  if (~ init?) {
    throw_unless(405, equal_slice(storage::collection_address, sender_address));

    storage::owner_address = in_msg_body~load_msg_addr();
    storage::content = in_msg_body~load_ref();
    storage::authority_address = in_msg_body~load_msg_addr();
    storage::revoked_at = 0;

    store_data();
    return ();
  }

  int op = in_msg_body~load_uint(32);

  if 
}
